# -*- coding: utf-8 -*-
"""
Module ƒë·ªÉ l·∫•y v√† x·ª≠ l√Ω c√°c tin t·ª©c kinh t·∫ø c√≥ t√°c ƒë·ªông m·∫°nh t·ª´ Forex Factory.
S·ª≠ d·ª•ng cloudscraper ƒë·ªÉ v∆∞·ª£t qua Cloudflare v√† regex ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu.
"""

from __future__ import annotations

import logging
import re
import time
from datetime import datetime, timedelta, timezone
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Tuple

import cloudscraper
from bs4 import BeautifulSoup

if TYPE_CHECKING:
    from APP.configs.app_config import RunConfig

logger = logging.getLogger(__name__)

# --- Constants ---
FOREX_FACTORY_URL = "https://www.forexfactory.com/calendar"
DEFAULT_HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
}
IMPACT_MAP = {"high": "Red", "medium": "Orange", "low": "Yellow"}
EXCLUDED_EVENT_KEYWORDS = (
    "bank holiday", "holiday", "tentative", "all day",
    "daylight", "speaks", "speech",
)

# --- Core Scraping Logic ---

def _fetch_forex_factory_html() -> Optional[str]:
    """
    L·∫•y n·ªôi dung HTML t·ª´ l·ªãch c·ªßa Forex Factory.
    S·ª≠ d·ª•ng cloudscraper ƒë·ªÉ x·ª≠ l√Ω c√°c bi·ªán ph√°p b·∫£o v·ªá c·ªßa Cloudflare.
    """
    logger.info("üåê ƒêang l·∫•y d·ªØ li·ªáu tin t·ª©c t·ª´ Forex Factory...")
    try:
        scraper = cloudscraper.create_scraper()
        response = scraper.get(FOREX_FACTORY_URL, headers=DEFAULT_HEADERS, timeout=20)
        response.raise_for_status()
        logger.info("‚úÖ L·∫•y th√†nh c√¥ng HTML t·ª´ Forex Factory.")
        return response.text
    except Exception:
        logger.error("‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y d·ªØ li·ªáu t·ª´ Forex Factory", exc_info=True)
        return None

# --- Data Parsing and Normalization ---

def _parse_html_data(html: str) -> List[Dict[str, Any]]:
    """
    Ph√¢n t√≠ch HTML t·ª´ Forex Factory ƒë·ªÉ tr√≠ch xu·∫•t c√°c s·ª± ki·ªán tin t·ª©c.
    """
    soup = BeautifulSoup(html, "html.parser")
    events: List[Dict[str, Any]] = []
    
    table = soup.find("table", class_="calendar__table")
    if not table:
        logger.error("Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch tr√™n trang Forex Factory.")
        return events

    rows = table.find_all("tr", class_="calendar__row")
    current_date = None

    for row in rows:
        # C·∫≠p nh·∫≠t ng√†y hi·ªán t·∫°i
        date_cell = row.find("td", class_="calendar__date")
        if date_cell and "date" in date_cell.text.lower():
            date_text = " ".join(date_cell.text.strip().split()[1:])
            try:
                current_date = datetime.strptime(f"{date_text} {datetime.now().year}", "%b %d %Y").date()
            except ValueError:
                logger.warning(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch ng√†y: {date_text}")
                continue
        
        if not current_date:
            continue

        # B·ªè qua c√°c h√†ng kh√¥ng ph·∫£i l√† s·ª± ki·ªán
        if not row.find("td", class_="calendar__impact"):
            continue

        try:
            impact_cell = row.find("td", class_="calendar__impact")
            impact_title = impact_cell.find("span").get("title", "").lower()
            if "high" not in impact_title:
                continue

            title = row.find("td", class_="calendar__event").text.strip()
            if not title or any(k in title.lower() for k in EXCLUDED_EVENT_KEYWORDS):
                continue

            time_str = row.find("td", class_="calendar__time").text.strip()
            if not time_str or "all-day" in time_str.lower():
                continue
            
            # Chuy·ªÉn ƒë·ªïi th·ªùi gian
            event_time = datetime.strptime(time_str, "%I:%M%p").time()
            dt_local = datetime.combine(current_date, event_time)
            # Gi·∫£ s·ª≠ th·ªùi gian t·ª´ FF l√† gi·ªù New York (ET), c·∫ßn chuy·ªÉn sang UTC r·ªìi sang local
            # ƒê√¢y l√† m·ªôt gi·∫£ ƒë·ªãnh ƒë∆°n gi·∫£n, th·ª±c t·∫ø c·∫ßn x·ª≠ l√Ω m√∫i gi·ªù ph·ª©c t·∫°p h∆°n
            dt_utc = dt_local.astimezone(timezone.utc)

            events.append({
                "when": dt_utc.astimezone(), # Chuy·ªÉn sang m√∫i gi·ªù ƒë·ªãa ph∆∞∆°ng
                "title": title,
                "curr": row.find("td", class_="calendar__currency").text.strip().upper() or None,
            })
        except Exception:
            logger.warning(f"L·ªói khi parse m·ªôt h√†ng s·ª± ki·ªán t·ª´ Forex Factory", exc_info=True)
            continue
            
    return events


def _dedup_and_sort_events(events: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """Lo·∫°i b·ªè c√°c s·ª± ki·ªán tr√πng l·∫∑p v√† s·∫Øp x·∫øp theo th·ªùi gian."""
    events.sort(key=lambda x: x["when"])
    seen, dedup = set(), []
    for x in events:
        key = (x["title"], int(x["when"].timestamp()) // 60)
        if key not in seen:
            seen.add(key)
            dedup.append(x)
    return dedup


# --- Main Public Function ---

def get_forex_factory_news() -> List[Dict[str, Any]]:
    """
    H√†m ch√≠nh ƒë·ªÉ l·∫•y, ph√¢n t√≠ch v√† x·ª≠ l√Ω tin t·ª©c t·ª´ Forex Factory.
    """
    logger.debug("B·∫Øt ƒë·∫ßu quy tr√¨nh l·∫•y tin t·ª©c b·∫±ng Forex Factory.")
    
    html_content = _fetch_forex_factory_html()
    if not html_content:
        return []
        
    parsed_events = _parse_html_data(html_content)
    final_events = _dedup_and_sort_events(parsed_events)
    
    logger.info(f"Ho√†n t·∫•t l·∫•y tin t·ª©c, t√¨m th·∫•y {len(final_events)} s·ª± ki·ªán c√≥ t√°c ƒë·ªông m·∫°nh.")
    return final_events


# --- Utility and Logic Functions ---

def symbol_currencies(sym: str) -> set[str]:
    """Ph√¢n t√≠ch m·ªôt symbol giao d·ªãch ƒë·ªÉ t√¨m c√°c ti·ªÅn t·ªá li√™n quan."""
    if not sym:
        return set()
    s = sym.upper()
    tokens = set(re.findall(r"[A-Z]{3}", s))
    if "XAU" in s or "GOLD" in s:
        tokens.update({"XAU", "USD"})
    if "XAG" in s or "SILVER" in s:
        tokens.update({"XAG", "USD"})
    if any(k in s for k in ("USOIL", "WTI", "BRENT", "UKOIL")):
        tokens.update({"USD"})
    if any(k in s for k in ("US30", "US500", "US100", "DJI", "SPX", "NAS100", "NDX")):
        tokens.update({"USD"})
    if any(k in s for k in ("DE40", "GER40", "DAX")):
        tokens.update({"EUR"})
    if any(k in s for k in ("UK100", "FTSE")):
        tokens.update({"GBP"})
    if any(k in s for k in ("JP225", "NIK", "NKY")):
        tokens.update({"JPY"})
    return {t for t in tokens if len(t) == 3 and t.isalpha()}


def is_within_news_window(
    events: List[Dict[str, Any]],
    symbol: str,
    minutes_before: int,
    minutes_after: int,
    *,
    now: Optional[datetime] = None,
) -> Tuple[bool, Optional[str]]:
    """Ki·ªÉm tra xem th·ªùi ƒëi·ªÉm hi·ªán t·∫°i c√≥ n·∫±m trong c·ª≠a s·ªï tin t·ª©c c·ªßa m·ªôt symbol kh√¥ng."""
    now_local = (now or datetime.now()).astimezone()
    allowed_currencies = symbol_currencies(symbol)
    
    for ev in events:
        if allowed_currencies and ev.get("curr") and ev["curr"] not in allowed_currencies:
            continue

        event_time = ev["when"]
        start_window = event_time - timedelta(minutes=max(0, minutes_before))
        end_window = event_time + timedelta(minutes=max(0, minutes_after))

        if start_window <= now_local <= end_window:
            why = f"{ev['title']}" + (f" [{ev['curr']}]" if ev.get("curr") else "")
            logger.info(f"Ph√°t hi·ªán trong c·ª≠a s·ªï tin t·ª©c: {why} @ {event_time.strftime('%H:%M')}")
            return True, f"{why} @ {event_time.strftime('%Y-%m-%d %H:%M')}"
            
    return False, None


def within_news_window_cached(
    symbol: str,
    minutes_before: int,
    minutes_after: int,
    *,
    cache_events: Optional[List[Dict[str, Any]]],
    cache_fetch_time: Optional[float],
    ttl_sec: int = 300,
    now: Optional[datetime] = None,
) -> Tuple[bool, Optional[str], List[Dict[str, Any]], float]:
    """
    Ki·ªÉm tra c·ª≠a s·ªï tin t·ª©c s·ª≠ d·ª•ng cache, l√†m m·ªõi n·∫øu cache h·∫øt h·∫°n.
    """
    cur_ts = time.time()
    events: List[Dict[str, Any]]
    fetch_ts: float

    if not cache_events or (cur_ts - (cache_fetch_time or 0.0)) > ttl_sec:
        logger.debug("Cache tin t·ª©c h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i, ƒëang fetch l·∫°i.")
        events = get_forex_factory_news()
        fetch_ts = cur_ts
    else:
        logger.debug("S·ª≠ d·ª•ng cache tin t·ª©c hi·ªán c√≥.")
        events = cache_events
        fetch_ts = cache_fetch_time or 0.0

    ok, why = is_within_news_window(
        events, symbol, minutes_before, minutes_after, now=now
    )
    return ok, why, events, fetch_ts


def next_events_for_symbol(
    events: List[Dict[str, Any]],
    symbol: str,
    *,
    now: Optional[datetime] = None,
    limit: int = 3,
) -> List[Dict[str, Any]]:
    """
    Tr·∫£ v·ªÅ c√°c s·ª± ki·ªán quan tr·ªçng s·∫Øp t·ªõi cho m·ªôt symbol c·ª• th·ªÉ.
    """
    try:
        now_local = (now or datetime.now()).astimezone()
        allowed_currencies = symbol_currencies(symbol)
        
        future_events = []
        for ev in events or []:
            if ev.get("when") and ev["when"] > now_local:
                if not allowed_currencies or (ev.get("curr") and ev["curr"] in allowed_currencies):
                    future_events.append(ev)
        
        future_events.sort(key=lambda x: x["when"])
        return future_events[:max(0, limit)]
    except Exception:
        logger.error("L·ªói trong next_events_for_symbol.", exc_info=True)
        return []
