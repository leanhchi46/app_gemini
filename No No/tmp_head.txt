# -*- coding: utf-8 -*-
"""\nỨNG DỤNG: Gemini Folder Analyze Once — Phân tích Ảnh Theo Lô (1 lần) + Báo cáo ICT/SMC\n========================================================================================\nMục tiêu:\n- Tự động nạp toàn bộ ảnh trong 1 thư mục (các khung D1/H4/M15/M1 hoặc theo đặt tên).\n- (Tuỳ chọn) Lấy dữ liệu từ MT5 để bổ sung số liệu khách quan (ATR, spread, VWAP, PDH/PDL...).\n- Gọi model Gemini để tạo BÁO CÁO TIÊU CHUẨN (7 dòng + phần A→E + JSON máy-đọc-được).\n- Hỗ trợ cache/upload song song, xuất báo cáo .md, gửi Telegram, NO-TRADE, và auto-trade thử nghiệm.\n\nKiến trúc tổng quan:\n- Tkinter GUI (Notebook: Report/Prompt/Options) + hàng đợi UI để đảm bảo thread-safe.\n- Lớp GeminiFolderOnceApp: chứa toàn bộ trạng thái và quy trình điều phối.\n- RunConfig (dataclass): snapshot cấu hình từ UI để dùng trong worker thread.\n- Các khối chức năng: upload/cache, gọi Gemini, hợp nhất báo cáo, MT5/Telegram/News, auto-trade.\n\nLưu ý:\n- Không thay đổi logic/chức năng gốc; chỉ xoá các comment cũ và thay bằng docstring tiếng Việt.\n- Tất cả docstring đều nhằm giải thích ý tưởng/luồng xử lý; không ảnh hưởng hành vi runtime.\n"""

from __future__ import annotations

                              
import os
import sys
import re
import json
import time
import ssl
import hashlib
import queue
import threading
 
 
 
import ast
from pathlib import Path
import math
import subprocess
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime, timedelta, timezone
import platform
 

                     
import tkinter as tk
from tkinter import ttk, filedialog
from tkinter.scrolledtext import ScrolledText

                                                
HAS_MPL = False
try:
    import matplotlib  # type: ignore
    import mplfinance  # type: ignore
    HAS_MPL = True
except Exception:
    HAS_MPL = False

                                       
try:
    from dotenv import load_dotenv
except Exception:
    load_dotenv = None

try:
    import google.generativeai as genai
except Exception:
    print("Bạn cần cài SDK Gemini: pip install google-generativeai")
    sys.exit(1)

 

try:
    import MetaTrader5 as mt5
except Exception:
    mt5 = None

try:
    from PIL import Image
except Exception:
    Image = None


                                                             
from gemini_folder_once.constants import (
    SUPPORTED_EXTS,
    DEFAULT_MODEL,
    APP_DIR,
    WORKSPACE_JSON,
    API_KEY_ENC,
    UPLOAD_CACHE_JSON,
)

from gemini_folder_once.utils import (
    _xor_bytes,
    _machine_key,
    obfuscate_text,
    deobfuscate_text,
)

from gemini_folder_once.telegram_client import TelegramClient, build_ssl_context

                                                                         
from gemini_folder_once.config import RunConfig
from gemini_folder_once import context_builder, report_parser
from gemini_folder_once import no_trade, news
from gemini_folder_once.chart_tab import ChartTabTV
from gemini_folder_once import uploader
from gemini_folder_once import mt5_utils
                                                                                
def _session_ranges(
    m1_rates,
    tz_shift_hours: int | None = None,
    source_tz: str = "UTC",
    target_tz: str = "Asia/Ho_Chi_Minh",
    day=None,
    ):
    """
    Tính high/low theo *các phiên trong ngày* (theo giờ Việt Nam, IANA tz chuẩn), dựa trên M1.
    London/New York tự xử lý DST. New York được tách 2 khóa: `newyork_pre`, `newyork_post`.
    - tz_shift_hours != None: dùng dịch thô (tương thích cũ, KHÔNG DST).
    - tz_shift_hours == None: dùng zoneinfo source_tz -> target_tz (có DST).
    """
    from datetime import datetime, timedelta, timezone
    try:
        from zoneinfo import ZoneInfo  # py>=3.9
    except Exception:
        ZoneInfo = None

    def _to_local(dt_naive_str: str):
        dt_utc = datetime.strptime(dt_naive_str, "%Y-%m-%d %H:%M:%S")
        if tz_shift_hours is not None:
            return dt_utc + timedelta(hours=int(tz_shift_hours))
        if ZoneInfo:
            src = ZoneInfo(source_tz or "UTC")
            dst = ZoneInfo(target_tz or "Asia/Ho_Chi_Minh")
            return dt_utc.replace(tzinfo=src).astimezone(dst).replace(tzinfo=None)
        # Fallback không zoneinfo: giả định UTC +7
        return dt_utc + timedelta(hours=7)

    if not m1_rates:
        return {
            "asia": {"start": "07:00", "end": "16:00", "high": None, "low": None},
            "london": {"start": "14:00", "end": "23:00", "high": None, "low": None},
            "newyork_pre": {"start": "19:00", "end": "24:00", "high": None, "low": None},
            "newyork_post": {"start": "00:00", "end": "05:00", "high": None, "low": None},
        }

    first_local = _to_local(m1_rates[0]["time"])
    today_local = day or first_local.date()
    year = today_local.year

    def _dst_on(zone: str, d) -> bool:
        if not ZoneInfo:
            return False
        z = ZoneInfo(zone)
        jan = datetime(year, 1, 1, tzinfo=z).utcoffset()
