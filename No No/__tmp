from __future__ import annotations

import tkinter as tk
from tkinter import ttk

try:
    # Optional: Only needed when the Chart tab is used
    from matplotlib.figure import Figure
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
except Exception:  # pragma: no cover - optional UI deps
    Figure = None  # type: ignore
    FigureCanvasTkAgg = None  # type: ignore


class ChartTabTV:
    """
    Chart tab for displaying price data, account info, positions and history.
    Relies on MetaTrader5 and matplotlib if present; constructed by the main app
    only when those dependencies are available.
    """

    def __init__(self, app, notebook):
        self.app = app
        self.root = app.root

        self.symbol_var = tk.StringVar(value="XAUUSD")
        self.tf_var = tk.StringVar(value="M1")
        self.n_candles_var = tk.IntVar(value=100)
        self.refresh_secs_var = tk.IntVar(value=1)

        self._after_job = None
        self._running = False

        self.tab = ttk.Frame(notebook, padding=8)
        notebook.add(self.tab, text="Chart")

        self.tab.rowconfigure(1, weight=1)
        self.tab.columnconfigure(0, weight=2)
        self.tab.columnconfigure(1, weight=1)

        ctrl = ttk.Frame(self.tab)
        ctrl.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 6))
        for i in range(10):
            ctrl.columnconfigure(i, weight=0)
        ctrl.columnconfigure(9, weight=1)

        ttk.Label(ctrl, text="Symbol:").grid(row=0, column=0, sticky="w")
        self.cbo_symbol = ttk.Combobox(ctrl, width=16, textvariable=self.symbol_var, state="normal", values=[])
        self.cbo_symbol.grid(row=0, column=1, sticky="w", padx=(4, 10))
        self.cbo_symbol.bind("<<ComboboxSelected>>", lambda e: self._redraw_safe())
        self._populate_symbol_list()

        ttk.Label(ctrl, text="TF:").grid(row=0, column=2, sticky="w")
        self.cbo_tf = ttk.Combobox(
            ctrl, width=6, state="readonly", values=["M1", "M5", "M15", "H1", "H4", "D1"], textvariable=self.tf_var
        )
        self.cbo_tf.grid(row=0, column=3, sticky="w", padx=(4, 10))
        self.cbo_tf.bind("<<ComboboxSelected>>", lambda e: self._redraw_safe())

        ttk.Label(ctrl, text="Số nến:").grid(row=0, column=4, sticky="w")
        ttk.Spinbox(ctrl, from_=50, to=5000, textvariable=self.n_candles_var, width=8, command=self._redraw_safe)\
            .grid(row=0, column=5, sticky="w", padx=(4, 10))

        ttk.Label(ctrl, text="Làm mới (s):").grid(row=0, column=6, sticky="w")
        ttk.Spinbox(ctrl, from_=1, to=3600, textvariable=self.refresh_secs_var, width=6)\
            .grid(row=0, column=7, sticky="w", padx=(4, 10))

        self.btn_start = ttk.Button(ctrl, text="► Start", command=self.start)
        self.btn_start.grid(row=0, column=8, sticky="w")
        self.btn_stop = ttk.Button(ctrl, text="□ Stop", command=self.stop, state="disabled")
        self.btn_stop.grid(row=0, column=9, sticky="w", padx=(6, 10))
        try:
            self.btn_start.grid_remove()
            self.btn_stop.grid_remove()
        except Exception:
            pass

        self.root.after(200, self.start)

        chart_wrap = ttk.Frame(self.tab)
        chart_wrap.grid(row=1, column=0, sticky="nsew", padx=(0, 6))
        chart_wrap.rowconfigure(1, weight=1)
        chart_wrap.columnconfigure(0, weight=1)

        if Figure is None or FigureCanvasTkAgg is None:
            # Minimal fallback if matplotlib is not present
            label = ttk.Label(chart_wrap, text="Matplotlib not available")
            label.grid(row=0, column=0, sticky="w")
            return

        self.fig = Figure(figsize=(6, 4), dpi=100, constrained_layout=False)
        self.ax_price = self.fig.add_subplot(1, 1, 1)
        self.canvas = FigureCanvasTkAgg(self.fig, master=chart_wrap)
        self.canvas.get_tk_widget().grid(row=1, column=0, sticky="nsew")

        try:
            from matplotlib.backends.backend_tkagg import NavigationToolbar2Tk  # type: ignore
            tb_frame = ttk.Frame(chart_wrap)
            tb_frame.grid(row=0, column=0, sticky="ew", pady=(0, 4))
            self.toolbar = NavigationToolbar2Tk(self.canvas, tb_frame)
            self.toolbar.update()
        except Exception:
            self.toolbar = None

        acc_box = ttk.LabelFrame(self.tab, text="Account info", padding=8)
        acc_box.grid(row=1, column=1, sticky="nsew")
        for i in range(2):
            acc_box.columnconfigure(i, weight=1)
        self.acc_balance = tk.StringVar(value="-")
        self.acc_equity = tk.StringVar(value="-")
        self.acc_margin = tk.StringVar(value="-")
        self.acc_leverage = tk.StringVar(value="-")
        self.acc_currency = tk.StringVar(value="-")
        self.acc_status = tk.StringVar(value="Chưa kết nối MT5")
        ttk.Label(acc_box, text="Balance:").grid(row=0, column=0, sticky="w")
        ttk.Label(acc_box, textvariable=self.acc_balance).grid(row=0, column=1, sticky="e")
        ttk.Label(acc_box, text="Equity:").grid(row=1, column=0, sticky="w")
        ttk.Label(acc_box, textvariable=self.acc_equity).grid(row=1, column=1, sticky="e")
        ttk.Label(acc_box, text="Free margin:").grid(row=2, column=0, sticky="w")
        ttk.Label(acc_box, textvariable=self.acc_margin).grid(row=2, column=1, sticky="e")
        ttk.Label(acc_box, text="Leverage:").grid(row=3, column=0, sticky="w")
        ttk.Label(acc_box, textvariable=self.acc_leverage).grid(row=3, column=1, sticky="e")
        ttk.Label(acc_box, text="Currency:").grid(row=4, column=0, sticky="w")
        ttk.Label(acc_box, textvariable=self.acc_currency).grid(row=4, column=1, sticky="e")
        ttk.Separator(acc_box, orient="horizontal").grid(row=5, column=0, columnspan=2, sticky="ew", pady=6)
        ttk.Label(acc_box, textvariable=self.acc_status, foreground="#666").grid(row=6, column=0, columnspan=2, sticky="w")

        grids = ttk.Frame(self.tab)
        grids.grid(row=2, column=0, columnspan=2, sticky="nsew", pady=(6, 0))
        grids.columnconfigure(0, weight=1)
        grids.columnconfigure(1, weight=1)
        grids.rowconfigure(0, weight=1)

        pos_box = ttk.LabelFrame(grids, text="Open positions", padding=6)
        pos_box.grid(row=0, column=0, sticky="nsew", padx=(0, 4))
        pos_box.rowconfigure(0, weight=1)
        pos_box.columnconfigure(0, weight=1)
        self.pos_cols = ("ticket", "type", "lots", "price", "sl", "tp", "pnl")
        self.tree_pos = ttk.Treeview(pos_box, columns=self.pos_cols, show="headings", height=6)
        for c, w in zip(self.pos_cols, (90, 110, 70, 110, 110, 110, 100)):
            self.tree_pos.heading(c, text=c.upper())
            self.tree_pos.column(c, width=w, anchor="e" if c in ("lots", "price", "sl", "tp", "pnl") else "w")
        self.tree_pos.grid(row=0, column=0, sticky="nsew")
        scr1 = ttk.Scrollbar(pos_box, orient="vertical", command=self.tree_pos.yview)
        self.tree_pos.configure(yscrollcommand=scr1.set)
        scr1.grid(row=0, column=1, sticky="ns")

        his_box = ttk.LabelFrame(grids, text="History (deals gần nhất)", padding=6)
        his_box.grid(row=0, column=1, sticky="nsew", padx=(4, 0))
        his_box.rowconfigure(0, weight=1)
        his_box.columnconfigure(0, weight=1)
        self.his_cols = ("time", "ticket", "type", "volume", "price", "profit")
        self.tree_his = ttk.Treeview(his_box, columns=self.his_cols, show="headings", height=6)
        for c, w in zip(self.his_cols, (140, 90, 70, 80, 110, 100)):
            self.tree_his.heading(c, text=c.upper())
            self.tree_his.column(c, width=w, anchor="e" if c in ("volume", "price", "profit") else "w")
        self.tree_his.grid(row=0, column=0, sticky="nsew")
        scr2 = ttk.Scrollbar(his_box, orient="vertical", command=self.tree_his.yview)
        self.tree_his.configure(yscrollcommand=scr2.set)
        scr2.grid(row=0, column=1, sticky="ns")

        self._redraw_safe()

    def start(self):
        if self._running:
            return
        self._running = True
        self.btn_start.configure(state="disabled")
        self.btn_stop.configure(state="normal")
        self._tick()

    def stop(self):
        self._running = False
        if self._after_job:
            self.root.after_cancel(self._after_job)
            self._after_job = None
        self.btn_start.configure(state="normal")
        self.btn_stop.configure(state="disabled")

    def _populate_symbol_list(self):
        try:
            if not self._ensure_mt5(want_account=False):
                return
            import MetaTrader5 as mt5
            syms = mt5.symbols_get()
            names = sorted([s.name for s in syms]) if syms else []
            if names:
                self.cbo_symbol["values"] = names
                if "XAUUSD" in names:
                    self.symbol_var.set("XAUUSD")
        except Exception:
            pass

    def _mt5_tf(self, tf_str: str):
        try:
            import MetaTrader5 as mt5
        except Exception:
            return None
        mapping = {
            "M1": mt5.TIMEFRAME_M1,
            "M5": mt5.TIMEFRAME_M5,
            "M15": mt5.TIMEFRAME_M15,
            "H1": mt5.TIMEFRAME_H1,
            "H4": mt5.TIMEFRAME_H4,
            "D1": mt5.TIMEFRAME_D1,
        }
        return mapping.get(tf_str.upper(), mt5.TIMEFRAME_M5)

    def _ensure_mt5(self, *, want_account: bool = True) -> bool:
        try:
            import MetaTrader5 as mt5
        except Exception:
            self.acc_status.set("Chưa cài MetaTrader5 (pip install MetaTrader5)")
            return False
        if getattr(self.app, "mt5_initialized", False):
            if want_account and mt5.account_info() is None:
                self.acc_status.set("MT5: chưa đăng nhập (account_info=None)")
                return False
            return True
        if getattr(self.app, "mt5_enabled_var", None) and self.app.mt5_enabled_var.get():
            try:
                self.app._mt5_connect()
            except Exception:
                pass
            if getattr(self.app, "mt5_initialized", False):
                if want_account and mt5.account_info() is None:
                    self.acc_status.set("MT5: chưa đăng nhập (account_info=None)")
                    return False
                return True
        return False

    def _rates_to_df(self, symbol, tf_code, count: int):
        try:
            import MetaTrader5 as mt5
            import pandas as pd
        except Exception:
            return None
        try:
            rates = mt5.copy_rates_from_pos(symbol, tf_code, 0, int(count))
            if not rates:
                return None
            import pandas as pd
            df = pd.DataFrame(rates)
            if df.empty:
                return None
            import datetime as _dt
            df["time"] = pd.to_datetime(df["time"], unit="s")
            df.set_index("time", inplace=True)
            return df
        except Exception:
