            return None

    def _style(self):
        try:
            import matplotlib as mpl
            mpl.rcParams.update({"axes.grid": True, "grid.alpha": 0.25})
        except Exception:
            pass

    def _fmt(self, x, digits=5):
        try:
            return f"{float(x):.{int(digits)}f}"
        except Exception:
            return str(x)

    def _update_account_info(self, symbol: str):
        try:
            import MetaTrader5 as mt5
            ai = mt5.account_info()
            if ai:
                self.acc_balance.set(f"{ai.balance:.2f}")
                self.acc_equity.set(f"{ai.equity:.2f}")
                self.acc_margin.set(f"{ai.margin_free:.2f}")
                self.acc_leverage.set(str(getattr(ai, "leverage", "-")))
                self.acc_currency.set(getattr(ai, "currency", "-"))
                self.acc_status.set("Kết nối MT5 OK")
        except Exception:
            pass

    def _fill_positions_table(self, symbol: str):
        try:
            import MetaTrader5 as mt5
            poss = mt5.positions_get(symbol=symbol) or []
            self.tree_pos.delete(*self.tree_pos.get_children())
            for p in poss:
                typ = int(getattr(p, "type", 0))
                lots = float(getattr(p, "volume", 0.0))
                price = float(getattr(p, "price_open", 0.0))
                sl = float(getattr(p, "sl", 0.0)) or None
                tp = float(getattr(p, "tp", 0.0)) or None
                pnl = float(getattr(p, "profit", 0.0))
                self.tree_pos.insert("", "end", values=(getattr(p, "ticket", "?"), "BUY" if typ == 0 else "SELL", f"{lots:.2f}",
                                                          self._fmt(price), self._fmt(sl), self._fmt(tp), f"{pnl:.2f}"))
        except Exception:
            pass

    def _fill_history_table(self, symbol: str):
        try:
            import MetaTrader5 as mt5
            self.tree_his.delete(*self.tree_his.get_children())
            now = __import__("datetime").datetime.now()
            deals = mt5.history_deals_get(now.replace(hour=0, minute=0, second=0), now, group=f"*{symbol}*") or []
            for d in deals[-100:]:
                t = getattr(d, "time", None)
                if t:
                    import datetime as _dt
                    t = _dt.datetime.fromtimestamp(int(t))
                self.tree_his.insert("", "end", values=(t, getattr(d, "ticket", "?"), getattr(d, "type", "?"),
                                                          getattr(d, "volume", "?"), getattr(d, "price", "?"), getattr(d, "profit", "?")))
        except Exception:
            pass

    def _draw_chart(self):
        try:
            import MetaTrader5 as mt5
        except Exception:
            return
        sym = self.symbol_var.get().strip()
        tf_code = self._mt5_tf(self.tf_var.get())
        cnt = int(self.n_candles_var.get() or 100)
        df = self._rates_to_df(sym, tf_code, cnt)
        if df is None or df.empty:
            self.ax_price.clear()
            self.ax_price.set_title("No data")
            self.canvas.draw_idle()
            return
        self.ax_price.clear()
        try:
            import matplotlib.dates as mdates
            self.ax_price.plot(df.index, df["close"], color="#0ea5e9", lw=1.2)
            self.ax_price.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
        except Exception:
            pass
        try:
            digits = 2
            info = mt5.symbol_info(sym)
            if info:
                digits = int(getattr(info, "digits", 2))
            poss = mt5.positions_get(symbol=sym) or []
            for p in poss:
                typ_i = int(getattr(p, "type", 0))
                entry = float(getattr(p, "price_open", 0.0))
                sl = float(getattr(p, "sl", 0.0)) or None
                tp = float(getattr(p, "tp", 0.0)) or None
                col = "#22c55e" if typ_i == 0 else "#ef4444"
                self.ax_price.axhline(entry, color=col, ls="--", lw=1.0, alpha=0.95)
                if sl:
                    self.ax_price.axhline(sl, color="#ef4444", ls=":", lw=1.0, alpha=0.85)
                if tp:
                    self.ax_price.axhline(tp, color="#22c55e", ls=":", lw=1.0, alpha=0.85)
                label = f"{'BUY' if typ_i==0 else 'SELL'} {getattr(p,'volume',0):.2f} @{self._fmt(entry, digits)}"
                self.ax_price.text(df.index[-1], entry, "  " + label, va="center", color=col, fontsize=8)

            ords = mt5.orders_get(symbol=sym) or []
            def _otype_txt(t):
                m = {
                    getattr(mt5, "ORDER_TYPE_BUY_LIMIT", 2):  "BUY LIMIT",
                    getattr(mt5, "ORDER_TYPE_BUY_STOP", 4):   "BUY STOP",
                    getattr(mt5, "ORDER_TYPE_SELL_LIMIT", 3): "SELL LIMIT",
                    getattr(mt5, "ORDER_TYPE_SELL_STOP", 5):  "SELL STOP",
                }
                return m.get(int(t), f"TYPE {t}")
            for o in ords:
                otype = int(getattr(o, "type", 0))
                lots  = float(getattr(o, "volume_current", 0.0))
                px    = float(getattr(o, "price_open", 0.0)) or float(getattr(o, "price_current", 0.0))
                sl    = float(getattr(o, "sl", 0.0)) or None
                tp    = float(getattr(o, "tp", 0.0)) or None
                pend_col = "#8b5cf6"
                self.ax_price.axhline(px, color=pend_col, ls="--", lw=1.1, alpha=0.95)
                txt = f"PEND {_otype_txt(otype)} {lots:.2f} @{self._fmt(px, digits)}"
                self.ax_price.text(df.index[-1], px, "  " + txt, va="center", color=pend_col, fontsize=8)
                if sl:
                    self.ax_price.axhline(sl, color="#ef4444", ls=":", lw=1.0, alpha=0.85)
                    self.ax_price.text(df.index[-1], sl, "  SL", va="center", color="#ef4444", fontsize=7)
                if tp:
                    self.ax_price.axhline(tp, color="#22c55e", ls=":", lw=1.0, alpha=0.85)
                    self.ax_price.text(df.index[-1], tp, "  TP", va="center", color="#22c55e", fontsize=7)
        except Exception:
            pass

        self.ax_price.set_title(f"{sym}  •  {self.tf_var.get()}  •  {len(df)} bars")
        self.canvas.draw_idle()

        self._update_account_info(sym)
        self._fill_positions_table(sym)
        self._fill_history_table(sym)

    def _redraw_safe(self):
        try:
            self._draw_chart()
        except Exception as e:
            try:
                self.ax_price.clear()
                self.ax_price.set_title(f"Chart error: {e}")
                self.canvas.draw_idle()
            except Exception:
                pass

    def _tick(self):
        if not self._running:
            return
        self._redraw_safe()
        secs = max(1, int(self.refresh_secs_var.get() or 5))
        self._after_job = self.root.after(secs * 1000, self._tick)

